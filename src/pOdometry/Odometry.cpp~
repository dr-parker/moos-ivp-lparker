/************************************************************/
/*    NAME: Lonnie Parker                                   */
/*    ORGN: MIT                                             */
/*    FILE: Odometry.cpp                                    */
/*    DATE:                                                 */
/************************************************************/

#include <iterator>
#include <iostream>
#include <math.h>
#include "MBUtils.h"
#include "Odometry.h"

using namespace std;

//---------------------------------------------------------
// Constructor

Odometry::Odometry()
{
  m_first_reading = false;
  m_current_x = 0;
  m_current_y = 0;
  m_previous_x = 0;
  m_previous_y = 0;
  m_total_distance = 0;

  m_iterations = 0;
  m_timewarp   = 1;
}

//---------------------------------------------------------
// Destructor

Odometry::~Odometry()
{
}

//---------------------------------------------------------
// Procedure: OnNewMail

bool Odometry::OnNewMail(MOOSMSG_LIST &NewMail)
{
  //Add to create an AppCastingMOOSApp
  AppCastingMOOSApp::OnNewMail(NewMail);

  MOOSMSG_LIST::iterator p;

  //Preserve previous locations
  m_previous_x = m_current_x;
  m_previous_y = m_current_y;

  for(p=NewMail.begin(); p!=NewMail.end(); p++) {
    CMOOSMsg &msg = *p;
    
#if 0 // Keep these around just for template
    string key   = msg.GetKey();
    string comm  = msg.GetCommunity();
    double dval  = msg.GetDouble();
    string sval  = msg.GetString(); 
    string msrc  = msg.GetSource();
    double mtime = msg.GetTime();
    bool   mdbl  = msg.IsDouble();
    bool   mstr  = msg.IsString();
#endif

  string key = toupper(stripBlankEnds(msg.m_sKey));

  if(key == "NAV_X")
    m_current_x = msg.m_dfVal;
  else if(key == "NAV_Y")
    m_current_y = msg.m_dfVal;
  
  }
  
   return(true);
}

//---------------------------------------------------------
// Procedure: OnConnectToServer

bool Odometry::OnConnectToServer()
{
   // register for variables here
   // possibly look at the mission file?
   // m_MissionReader.GetConfigurationParam("Name", <string>);
   // m_Comms.Register("VARNAME", 0);
	
   RegisterVariables();
   return(true);
}

//---------------------------------------------------------
// Procedure: Iterate()
//            happens AppTick times per second

bool Odometry::Iterate()
{
  //Add to create an AppCastingMOOSApp
  AppCastingMOOSApp::Iterate();
  
  m_iterations++;

  if(m_iterations == 1){
    m_total_distance = 0; //Intialize total distance variable
  }else{
    m_total_distance = m_total_distance + sqrt(pow((m_current_x - m_previous_x),2) + pow((m_current_y - m_previous_y),2));
  }
  
  //MOOSDebugWrite(MOOSFormat("ODOMETRY_DIST        = %.3f", m_total_distance));
  Notify("ODOMETRY_DIST", m_total_distance);

  //Add to create an AppCastingMOOSApp
  AppCastingMOOSApp::PostReport();
  return(true);
}

//---------------------------------------------------------
// Procedure: OnStartUp()
//            happens before connection is open

bool Odometry::OnStartUp()
{
  //Add to create an AppCastingMOOSApp
  AppCastingMOOSApp::OnStartUp();
  
  list<string> sParams;
  m_MissionReader.EnableVerbatimQuoting(false);
  if(m_MissionReader.GetConfiguration(GetAppName(), sParams)) {
    list<string>::iterator p;
    for(p=sParams.begin(); p!=sParams.end(); p++) {
      string original_line = *p;
      string param = stripBlankEnds(toupper(biteString(*p, '=')));
      string value = stripBlankEnds(*p);
      
      if(param == "FOO") {
        //handled
      }
      else if(param == "BAR") {
        //handled
      }
    }
  }
  
  m_timewarp = GetMOOSTimeWarp();

  RegisterVariables();	
  return(true);
}

//---------------------------------------------------------
// Procedure: RegisterVariables

void Odometry::RegisterVariables()
{

  //Commented out. Provided as a part of template and found in example pXRelayTest
  /*if(m_incoming_var != "")
    m_Comms.Register(m_incoming_var, 0);
  */

  //Add to create an AppCastingMOOSApp
  AppCastingMOOSApp::RegisterVariables();


  
  m_Comms.Register("NAV_X",0);
  m_Comms.Register("NAV_Y",0);
  m_Comms.Register("APPCAST_REQ",0);
}

//---------------------------------------------------------
// Procedure: buildReport

bool Odometry::buildReport()
{
  m_msgs << "Total Distance"  << endl;
  m_msgs << "--------------"  << endl;
  m_msgs << m_total_distance  << endl;
}

